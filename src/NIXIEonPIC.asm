;*******************************************************************************
;                                                                              *
;    Filename:                                                                 *
;    Date: 13.04.2015
;    File Version: 0.1
;    Author:
;    Company:
;    Description: Initial assembly file made in MPLAB 8 for DIY NIXIE project
;                                                                              *
;*******************************************************************************
;                                                                              *
;    Known Issues: This template is designed for relocatable code.  As such,   *
;    build errors such as "Directive only allowed when generating an object    *
;    file" will result when the 'Build in Absolute Mode' checkbox is selected  *
;    in the project properties.  Designing code in absolute mode is            *
;    antiquated - use relocatable mode.                                        *
;                                                                              *
;*******************************************************************************
;                                                                              *
;    Revision History:                                                         *
;                                                                              *
;*******************************************************************************



;*******************************************************************************
; Processor Inclusion
;
; TODO Step #1 Open the task list under Window > Tasks.  Include your
; device .inc file - e.g. #include <device_name>.inc.  Available
; include files are in C:\Program Files\Microchip\MPLABX\mpasmx
; assuming the default installation path for MPLAB X.  You may manually find
; the appropriate include file for your device here and include it, or
; simply copy the include generated by the configuration bits
; generator (see Step #2).
;
;*******************************************************************************

;#include <p16f887.inc>
#include "p16f628a.inc"  ; Include header file

;*******************************************************************************
;
; TODO Step #2 - Configuration Word Setup
;
; The 'CONFIG' directive is used to embed the configuration word within the
; .asm file. MPLAB X requires users to embed their configuration words
; into source code.  See the device datasheet for additional information
; on configuration word settings.  Device configuration bits descriptions
; are in C:\Program Files\Microchip\MPLABX\mpasmx\P<device_name>.inc
; (may change depending on your MPLAB X installation directory).
;
; MPLAB X has a feature which generates configuration bits source code.  Go to
; Window > PIC Memory Views > Configuration Bits.  Configure each field as
; needed and select 'Generate Source Code to Output'.  The resulting code which
; appears in the 'Output Window' > 'Config Bits Source' tab may be copied
; below.
;
;*******************************************************************************
;; config for DEV board with pic16F887
;__CONFIG    _CONFIG1, _LVP_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_OFF & _CPD_OFF & _CP_OFF & _MCLRE_OFF & _PWRTE_ON & _WDT_OFF & _INTRC_OSC_NOCLKOUT
;__CONFIG    _CONFIG2, _WRT_OFF & _BOR21V

; config for PIC16F628
__config  _INTOSC_OSC_NOCLKOUT & _LVP_OFF & _WDT_OFF & _PWRTE_ON & _BODEN_OFF & _MCLRE_OFF & _CP_OFF


;*******************************************************************************
;
; TODO Step #3 - Variable Definitions
;
; Refer to datasheet for available data memory (RAM) organization assuming
; relocatible code organization (which is an option in project
; properties > mpasm (Global Options)).  Absolute mode generally should
; be used sparingly.
;
; Example of using GPR Uninitialized Data
;
;   GPR_VAR        UDATA
;   MYVAR1         RES        1      ; User variable linker places
;   MYVAR2         RES        1      ; User variable linker places
;   MYVAR3         RES        1      ; User variable linker places
;
;   ; Example of using Access Uninitialized Data Section (when available)
;   ; The variables for the context saving in the device datasheet may need
;   ; memory reserved here.
;   INT_VAR        UDATA_ACS
;   W_TEMP         RES        1      ; w register for context saving (ACCESS)
;   STATUS_TEMP    RES        1      ; status used for context saving
;   BSR_TEMP       RES        1      ; bank select used for ISR context saving
;
;*******************************************************************************

RB0 EQU 0
RB3 EQU 3
RB4 EQU 4
RB5 EQU 5

RA4 EQU 4
RA5 EQU 5
RA6 EQU 6

CCP1 EQU RB3

IncMinutes EQU 0

FALSE	EQU 0
TRUE	EQU 1

Debug   EQU FALSE           ; A Debugging Flag

      cblock 0x20 ; (max 80 Bytes)
		Delay1
		Delay2
		dataL



		; Для облегчения вывода через дешифратор введём переменные, отображающие текущее значение дешифратора
;		HOURS_DEC		; часы - десятки | 0000 to 0010
;		HOURS_UNIT		; часы - единицы | 0000 to 1001

;		MINUTES_DEC		; минуты - десятки | 0000 to 0101
;		MINUTES_UNIT	; минуты - единицы | 0000 to 1001
 
;		SECONDS_DEC		; секунды - десятки | 0000 to 0101
;		SECONDS_UNIT	; секунды - единицы | 0000 to 1001
;
;		HOURS
;		MINUTES
;		SECONDS

		SECONDS_BCD
		MINUTES_BCD
		HOURS_BCD

;		STATUS_TIME

		PORTA_TMP		; значения PORTA для сохранения состояний выходов, не задействованных при динамической индикации
		IND_TMP			; испольуем при динамической индикации
		IND_STATUS		; дополнительные флаги для динамической индикации

		;
		;  +------+-------+-------+-----------+-------+-------+----------+---------+
		;  |    |  ---  |  ---  |  |  ---  |  ---  |  | |
		;  +------+-------+-------+-----------+-------+-------+----------+---------+
		;

     endc
     

     cblock 0x70     ; put these up in unbanked RAM (max 16 Bytes)
		W_Save
		STATUS_Save
     endc
   
;*******************************************************************************
; Reset Vector
;*******************************************************************************

RES_VECT  CODE    0x0000            ; processor reset vector
    GOTO    MAIN_PROGRAM                   ; go to beginning of program

;*******************************************************************************
; TODO Step #4 - Interrupt Service Routines
;
; There are a few different ways to structure interrupt routines in the 8
; bit device families.  On PIC18's the high priority and low priority
; interrupts are located at 0x0008 and 0x0018, respectively.  On PIC16's and
; lower the interrupt is at 0x0004.  Between device families there is subtle
; variation in the both the hardware supporting the ISR (for restoring
; interrupt context) as well as the software used to restore the context
; (without corrupting the STATUS bits).
;
; General formats are shown below in relocatible format.
;
;------------------------------PIC16's and below--------------------------------
;
; ISR       CODE    0x0004           ; interrupt vector location
;
;     <Search the device datasheet for 'context' and copy interrupt
;     context saving code here.  Older devices need context saving code,
;     but newer devices like the 16F#### don't need context saving code.>
;
;     RETFIE
;
;*******************************************************************************

ISR       CODE    0x0004
    	
       
	movwf     W_Save              ; Save context
	movf      STATUS,w
	movwf     STATUS_Save

	bcf 	STATUS,RP0       ; select Register Page 0

        if ( Debug )
            bsf     PORTB, 0            ; Set high, use to measure total
        endif                           ;     time in Int Service Routine

;; отлавдка: помигать светодиодом
;	btfss PORTB,RB0
;	goto setBit

;	bcf PORTB,RB0 
 ;   goto stepNextInt    
;setBit:
;	bsf PORTB,RB0   
;stepNextInt:
;; помигали

;обработка переполнения таймера 1 - прошла секунда
	btfsc     PIR1,TMR1IF           ; Check Timer 1 
	goto      ServiceTimer1
	goto      ExitISR

ServiceTimer1:
	bcf       PIR1,TMR1IF         ; clear the interrupt flag. (must be done in software)

	MOVLW 0x80
	MOVWF TMR1H ; 1 Second Overflow
	clrf  TMR1L

	; модификация переменных, хранителей времени

 
	; модификация переменных, хранителей времени

	incf SECONDS_BCD, F 		; увеличим секунды на единицу

	movlw b'00001111'			; сброс в ноль при достижении 9 - аналогично добавить для минут и часов 
	andwf SECONDS_BCD, W

	btfss STATUS, Z
	goto SECONDS_CHECK

	movlw b'00000110'      
	iorwf SECONDS_BCD, F	

SECONDS_CHECK

	movlw b'01100110'
	subwf SECONDS_BCD, W
	
	btfss STATUS, Z				;если секунды дошли до 60 то необходимо модифицировать минуты 
	goto ExitISR

	movlw b'00000110'			; сбросим секунды в НОЛЬ
	movwf SECONDS_BCD 		

	incf MINUTES_BCD, F

	movlw b'00001111'			; сброс в ноль при достижении 9 - аналогично добавить для минут и часов 
	andwf MINUTES_BCD, W

	btfss STATUS, Z
	goto MINUTES_CHECK

	movlw b'00000110'      
	iorwf MINUTES_BCD, F	

MINUTES_CHECK


	; тут должна быть проверка будильника


	movlw b'01100110'
	subwf MINUTES_BCD, W

	btfss STATUS, Z				;если минуты дошли до 60 то необходимо модифицировать часы 
	goto ExitISR

	movlw b'00000110'			; сбросим минуты в НОЛЬ
	movwf MINUTES_BCD 		

	incf HOURS_BCD, F

	movlw b'00001111'			; сброс в ноль при достижении 9 - аналогично добавить для минут и часов 
	andwf HOURS_BCD, W

	btfss STATUS, Z
	goto HOURS_CHECK

	movlw b'00000110'      
	iorwf HOURS_BCD, F

HOURS_CHECK
	movlw b'00101010'
	subwf HOURS_BCD, W
	
	btfss STATUS, Z				;если часы дошли до 24 то необходимо модифицировать часы 
	goto ExitISR

	movlw b'00000110'			; сбросим часы в НОЛЬ
	movwf HOURS_BCD	


ExitISR:
	movf      STATUS_Save,w       ; Restore context
	movwf     STATUS
	swapf     W_Save,f            ; swapf doesn't affect Status bits, but MOVF would
	swapf     W_Save,w

        if ( Debug )
            bcf     PORTB, 0            ; Set high, use to measure total
        endif  

	retfie

 ; 


MAIN_PROGRAM:
; ------------------------------------ 
; SETUP PORTS
; ------------------------------------ 
; 
; 
	movlw 7 
	movwf CMCON             ; CMCON=7 set comperators off 

	clrf PORTA
	clrf PORTB

	bsf STATUS,RP0       ; select Register Page 1

	movlw b'00110000' 
	movwf TRISA             ; portA pins RA4 and RA5 inputs, all the others are output 

	movlw b'11000010'       ; RB7-RB6 and RB1(RX)=input, others output 
	movwf TRISB 




; ------------------------------------ 
; TIMER1
; ------------------------------------ 
; 
; 	

		bsf STATUS,RP0          ; select Register Page 1

		bsf PIE1, TMR1IE		; TMR1 overflow interrupt

 		bcf STATUS,RP0          ; select Register Page 0

		CLRF PIR1

		movlw b'00001110' 		; prescaler 1:1; OSC is on; Asynchonous input; Source - external clock; Timer is off
		movwf T1CON

		bsf INTCON, PEIE
		BSF INTCON, GIE 		; Enable all Interrupts

		MOVLW 0x80
		MOVWF TMR1H 			; 1 Second Overflow
		clrf  TMR1L				; очистка регистров значения Timer1

 		BSF T1CON, TMR1ON 		; Turn Timer 1 ON


;===============================
; 			Первичная инициализация переменных 
;===============================
;
		movlw b'00000110'		; заданная кодировка НУЛЯ в значениях!
		movwf SECONDS_BCD		; НОЛЬ секунд
		movwf MINUTES_BCD		; НОЛЬ минут
		movwf HOURS_BCD			; НОЛЬ часов

		clrf IND_STATUS

;===============================
; 			Основной цикл												
;===============================
; 

		;call message

MAIN_LOOP:  
       


	


		; SECONDS 
		movf SECONDS_BCD, w

		movwf IND_TMP			; тут будет текущее значение для дешифрации фесятков и единиц - задаётся до подпрограммы

		bsf IND_STATUS, RB4		; 
		bcf IND_STATUS, RB5

		call TIME_INDICATION

		call DELAY_1dot5_MS		; выводим задержку между отображением секунд и минут. можно заменить на любые инструкции нужной продолжительности

		; MINUTES 
		movf MINUTES_BCD, W

		movwf IND_TMP			; тут будет текущее значение для дешифрации фесятков и единиц - задаётся до подпрограммы

		bcf IND_STATUS, RB4		; 
		bsf IND_STATUS, RB5
		
		call TIME_INDICATION

		call DELAY_1dot5_MS		; выводим задержку между отображением секунд и минут. можно заменить на любые инструкции нужной продолжительности

		; HOURS
		movf HOURS_BCD, W

		movwf IND_TMP			; тут будет текущее значение для дешифрации фесятков и единиц - задаётся до подпрограммы
		bcf IND_STATUS, RB4		; 
		bcf IND_STATUS, RB5
		
		call TIME_INDICATION
		
		call DELAY_1dot5_MS		; выводим задержку между отображением секунд и минут. можно заменить на любые инструкции нужной продолжительности

		goto MAIN_LOOP 

;===============================
; подпрограмма вывода единиц и десятков одной группы единиц измерения														
;===============================
TIME_INDICATION


		movlw b'00000110'		; заданная кодировка НУЛЯ в младших полубайтах значений! 
		subwf IND_TMP, F		; её будем вычитать для получения правильного значения на дешифатор ИД1

		clrf PORTA_TMP
		bsf PORTA_TMP, RA6		; первая итерация с выставленным битом

dozensIndLoop

		movf PORTA, W			; заберем текущее состояние выходов PORTA
		andlw b'10110000'		; выделим биты, которые необходимо сохранить нетронутыми
		iorwf PORTA_TMP, F		; запомним неизменяемые биты из PORTA и бит RA6
	
		btfss PORTA_TMP, RA6	; если бит PORTA_TMP сброшен, то это вторая итерация цикла, и единицы уже выводились
		swapf IND_TMP, F		; значит необходимо получить значение для дешифрации десятков
		

		movf IND_TMP, W			; выделим значения для ИД1
		andlw b'00001111'

		iorwf PORTA_TMP, F		; внесем новые значения ИД1 в PORTA

		movf IND_STATUS, W		; выбрали между секундами минутами или часами
		andlw b'00110000'
		
		btfss STATUS, Z			; если операция И дала 0 значит выводим часы и необходимо проверить, не выводим ли 0 в десятках
		goto modifyPORTB

		btfsc PORTA_TMP, RA6	; RA6 = 0 значит должны выводить десятки часов, нужны доп. проверки
		goto modifyPORTB
		
		movwf IND_TMP 		; нужно сохранить данные для вывода PORTB иначе затрём Z

	; тут проверить на вывод 0 в десятках часов
		movf PORTA_TMP, W
		andlw b'00001111'

		btfsc STATUS, Z		; Z = 1 значит не выводим десятки часов
		goto END_TIME_INDICATION

		movf IND_TMP, W		; вернём значение для модификации PORTB



modifyPORTB


		bcf PORTB, RB4			; ИЛИ может выдать не тот разряд, что нужен для идикации
		bcf PORTB, RB5			; поэтому перед ИЛИ очистим оба нужных бита и получим достоверный
		iorwf PORTB, F

		movf PORTA_TMP, W		; подготовимся к выводу
		movwf PORTA				; подлностью вывели новое значение

		clrf PORTA_TMP			; сбросим RA6 для второй итерации и очистим прочие биты для чистоты эксперимента
		;bcf PORTA_TMP, RA6		; первая итерация окончена, единицы вывели



		btfss PORTA, RA6		; если бит выставлен, значит выводис десятки
		goto END_TIME_INDICATION

		call DELAY_1dot5_MS		; выводим задержку только внутри между десятками и единицами
		goto dozensIndLoop

END_TIME_INDICATION		
		return
		

; *******************************************************************
; *							Подпрограммы
; *******************************************************************



; ============================
; задержки
; ============================

;---
; приблизительно 197 мс
;-----

DELAY_197_MS

     decfsz    Delay1,f       ; Waste time.  
     goto      DELAY_197_MS    ; The Inner loop takes 3 instructions per loop * 256 loopss = 768 instructions
     decfsz    Delay2,f       ; The outer loop takes and additional 3 instructions per lap * 256 loops
     goto      DELAY_197_MS    ; (768+3) * 256 = 197376 instructions / 1M instructions per second = 0.197 sec.
                              ; call it two-tenths of a second.

	return



;---
; приблизительно 1.5 мс
;-----

DELAY_1dot5_MS		;

	movlw 0x05
	movwf Delay2
dl_set	
	movlw 0x3E			;1496 инструкций	;7D - для 1 мс ; 3E - 0,5мс ;BB - 1,5мс
	movwf Delay1

dl_loop
    decfsz    Delay1,f       ; Waste time.  
    goto      dl_loop    ; The Inner loop takes 3 instructions per loop * 256 loopss = 768 instructions = 0,000768 sec.
	decfsz    Delay2,f       ; The outer loop takes and additional 3 instructions per lap * 256 loops
    goto      dl_set    ; (768+3) * 256 = 197376 instructions / 1M instructions per second = 0.197 sec.
                              ; call it two-tenths of a second.

	return

    END 
