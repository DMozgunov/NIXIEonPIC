;*******************************************************************************
;                                                                              *
;    Filename:                                                                 *
;    Date: 13.04.2015
;    File Version: 0.1
;    Author:
;    Company:
;    Description: Initial assembly file made in MPLAB 8 for DIY NIXIE project
;                                                                              *
;*******************************************************************************
;                                                                              *
;    Known Issues: This template is designed for relocatable code.  As such,   *
;    build errors such as "Directive only allowed when generating an object    *
;    file" will result when the 'Build in Absolute Mode' checkbox is selected  *
;    in the project properties.  Designing code in absolute mode is            *
;    antiquated - use relocatable mode.                                        *
;                                                                              *
;*******************************************************************************
;                                                                              *
;    Revision History:                                                         *
;                                                                              *
;*******************************************************************************



;*******************************************************************************
; Processor Inclusion
;
; TODO Step #1 Open the task list under Window > Tasks.  Include your
; device .inc file - e.g. #include <device_name>.inc.  Available
; include files are in C:\Program Files\Microchip\MPLABX\mpasmx
; assuming the default installation path for MPLAB X.  You may manually find
; the appropriate include file for your device here and include it, or
; simply copy the include generated by the configuration bits
; generator (see Step #2).
;
;*******************************************************************************

;#include <p16f887.inc>
#include "p16f628a.inc"  ; Include header file

;*******************************************************************************
;
; TODO Step #2 - Configuration Word Setup
;
; The 'CONFIG' directive is used to embed the configuration word within the
; .asm file. MPLAB X requires users to embed their configuration words
; into source code.  See the device datasheet for additional information
; on configuration word settings.  Device configuration bits descriptions
; are in C:\Program Files\Microchip\MPLABX\mpasmx\P<device_name>.inc
; (may change depending on your MPLAB X installation directory).
;
; MPLAB X has a feature which generates configuration bits source code.  Go to
; Window > PIC Memory Views > Configuration Bits.  Configure each field as
; needed and select 'Generate Source Code to Output'.  The resulting code which
; appears in the 'Output Window' > 'Config Bits Source' tab may be copied
; below.
;
;*******************************************************************************
;; config for DEV board with pic16F887
;__CONFIG    _CONFIG1, _LVP_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_OFF & _CPD_OFF & _CP_OFF & _MCLRE_OFF & _PWRTE_ON & _WDT_OFF & _INTRC_OSC_NOCLKOUT
;__CONFIG    _CONFIG2, _WRT_OFF & _BOR21V

; config for PIC16F628
__config  _INTOSC_OSC_NOCLKOUT & _LVP_OFF & _WDT_OFF & _PWRTE_ON & _BODEN_OFF & _MCLRE_OFF & _CP_OFF
;;;_XT_OSC ; ??????? ?????

;*******************************************************************************
;
; TODO Step #3 - Variable Definitions
;
; Refer to datasheet for available data memory (RAM) organization assuming
; relocatible code organization (which is an option in project
; properties > mpasm (Global Options)).  Absolute mode generally should
; be used sparingly.
;
; Example of using GPR Uninitialized Data
;
;   GPR_VAR        UDATA
;   MYVAR1         RES        1      ; User variable linker places
;   MYVAR2         RES        1      ; User variable linker places
;   MYVAR3         RES        1      ; User variable linker places
;
;   ; Example of using Access Uninitialized Data Section (when available)
;   ; The variables for the context saving in the device datasheet may need
;   ; memory reserved here.
;   INT_VAR        UDATA_ACS
;   W_TEMP         RES        1      ; w register for context saving (ACCESS)
;   STATUS_TEMP    RES        1      ; status used for context saving
;   BSR_TEMP       RES        1      ; bank select used for ISR context saving
;
;*******************************************************************************

RB0 EQU 0
RB3 EQU 3
RB4 EQU 4
RB5 EQU 5

RA4 EQU 4
RA5 EQU 5
RA6 EQU 6

CCP1 EQU RB3

IncMinutes EQU 0

FALSE	EQU 0
TRUE	EQU 1

Debug   EQU FALSE           ; A Debugging Flag

;*******************************************************************************
; Reset Vector
;*******************************************************************************

RES_VECT  CODE    0x0000            ; processor reset vector
    GOTO    START                   ; go to beginning of program

;*******************************************************************************
; TODO Step #4 - Interrupt Service Routines
;
; There are a few different ways to structure interrupt routines in the 8
; bit device families.  On PIC18's the high priority and low priority
; interrupts are located at 0x0008 and 0x0018, respectively.  On PIC16's and
; lower the interrupt is at 0x0004.  Between device families there is subtle
; variation in the both the hardware supporting the ISR (for restoring
; interrupt context) as well as the software used to restore the context
; (without corrupting the STATUS bits).
;
; General formats are shown below in relocatible format.
;
;------------------------------PIC16's and below--------------------------------
;
; ISR       CODE    0x0004           ; interrupt vector location
;
;     <Search the device datasheet for 'context' and copy interrupt
;     context saving code here.  Older devices need context saving code,
;     but newer devices like the 16F#### don't need context saving code.>
;
;     RETFIE
;
;*******************************************************************************

ISR       CODE    0x0004
       ;org 0x04
    movwf     W_Save              ; Save context
    movf      STATUS,w
    movwf     STATUS_Save

    bcf 	STATUS,RP0       ; select Register Page 0

    if ( Debug )
    bsf     PORTB, 0            ; Set high, use to measure total
    endif                           ;     time in Int Service Routine

;; ????????: ???????? ???????????
;	btfss PORTB,RB0
;	goto setBit

;	bcf PORTB,RB0
 ;   goto stepNextInt
;setBit:
;	bsf PORTB,RB0
;stepNextInt:
;; ????????

;????????? ???????????? ??????? 1 - ?????? ???????
    btfsc     PIR1,TMR1IF           ; Check Timer 1
    goto      ServiceTimer1
    goto      ExitISR

ServiceTimer1:
    bcf       PIR1,TMR1IF         ; clear the interrupt flag. (must be done in software)

    MOVLW 0x80
    MOVWF TMR1H ; 1 Second Overflow
    clrf  TMR1L

	; ??????????? ??????????, ?????????? ???????


	; ??????????? ??????????, ?????????? ???????

    incf SECONDS_BCD, F 		; ???????? ??????? ?? ???????

    movlw b'00001111'			; ????? ? ???? ??? ?????????? 9 - ?????????? ???????? ??? ????? ? ?????
    andwf SECONDS_BCD, W

    btfss STATUS, Z
    goto SECONDS_CHECK

    movlw b'00000110'
    iorwf SECONDS_BCD, F

SECONDS_CHECK

    movlw b'01100110'
    subwf SECONDS_BCD, W

    btfss STATUS, Z				;???? ??????? ????? ?? 60 ?? ?????????? ?????????????? ??????
    goto ExitISR

    movlw b'00000110'			; ??????? ??????? ? ????
    movwf SECONDS_BCD

    incf MINUTES_BCD, F

    movlw b'00001111'			; ????? ? ???? ??? ?????????? 9 - ?????????? ???????? ??? ????? ? ?????
    andwf MINUTES_BCD, W

    btfss STATUS, Z
    goto MINUTES_CHECK

    movlw b'00000110'
    iorwf MINUTES_BCD, F

MINUTES_CHECK


	; ??? ?????? ???? ???????? ??????????


    movlw b'01100110'
    subwf MINUTES_BCD, W

    btfss STATUS, Z				;???? ?????? ????? ?? 60 ?? ?????????? ?????????????? ????
    goto ExitISR

    movlw b'00000110'			; ??????? ?????? ? ????
    movwf MINUTES_BCD

    incf HOURS_BCD, F

    movlw b'00001111'			; ????? ? ???? ??? ?????????? 9 - ?????????? ???????? ??? ????? ? ?????
    andwf HOURS_BCD, W

    btfss STATUS, Z
    goto HOURS_CHECK

    movlw b'00000110'
    iorwf HOURS_BCD, F

HOURS_CHECK
    movlw b'00101010'
    subwf HOURS_BCD, W

    btfss STATUS, Z				;???? ???? ????? ?? 24 ?? ?????????? ?????????????? ????
    goto ExitISR

    movlw b'00000110'			; ??????? ???? ? ????
    movwf HOURS_BCD


ExitISR:
    movf      STATUS_Save,w       ; Restore context
    movwf     STATUS
    swapf     W_Save,f            ; swapf doesn't affect Status bits, but MOVF would
    swapf     W_Save,w

    if ( Debug )
    bcf     PORTB, 0            ; Set high, use to measure total
    endif

    retfie

;*******************************************************************************
; MAIN PROGRAM
;*******************************************************************************

MAIN_PROG CODE               ; let linker place main program

    cblock 0x20
	Delay1               ; Define two file registers for the
	Delay2               ; delay loop
     	dataL



		; ??? ?????????? ?????? ????? ?????????? ?????? ??????????, ???????????? ??????? ???????? ???????????
;		HOURS_DEC		; ???? - ??????? | 0000 to 0010
;		HOURS_UNIT		; ???? - ??????? | 0000 to 1001

;		MINUTES_DEC		; ?????? - ??????? | 0000 to 0101
;		MINUTES_UNIT	; ?????? - ??????? | 0000 to 1001

;		SECONDS_DEC		; ??????? - ??????? | 0000 to 0101
;		SECONDS_UNIT	; ??????? - ??????? | 0000 to 1001
;
;		HOURS
;		MINUTES
;		SECONDS

	SECONDS_BCD
	MINUTES_BCD
	HOURS_BCD

;		STATUS_TIME

	PORTA_TMP		; ???????? PORTA ??? ?????????? ????????? ???????, ?? ??????????????? ??? ???????????? ?????????
	IND_TMP			; ????????? ??? ???????????? ?????????
	IND_STATUS		; ?????????????? ????? ??? ???????????? ?????????
    endc

    cblock 0x70     ; put these up in unbanked RAM (max 16 Bytes)
	W_Save
	STATUS_Save
    endc
START


; ------------------------------------
; SETUP PORTS
; ------------------------------------
;
;
    movlw 7
    movwf CMCON             ; CMCON=7 set comperators off

    clrf PORTA
    clrf PORTB

    bsf STATUS,RP0       ; select Register Page 1

    movlw b'00110000'
    movwf TRISA             ; portA pins RA4 and RA5 inputs, all the others are output

    movlw b'11000010'       ; RB7-RB6 and RB1(RX)=input, others output
    movwf TRISB




; ------------------------------------
; TIMER1
; ------------------------------------
;
;

    bsf STATUS,RP0          ; select Register Page 1

    bsf PIE1, TMR1IE		; TMR1 overflow interrupt

    bcf STATUS,RP0          ; select Register Page 0

    CLRF PIR1

    movlw b'00001110' 		; prescaler 1:1; OSC is on; Asynchonous input; Source - external clock; Timer is off
    movwf T1CON

    bsf INTCON, PEIE
    BSF INTCON, GIE 		; Enable all Interrupts

    MOVLW 0x80
    MOVWF TMR1H 			; 1 Second Overflow
    clrf  TMR1L				; ??????? ????????? ???????? Timer1

    BSF T1CON, TMR1ON 		; Turn Timer 1 ON


;===============================
; 			????????? ????????????? ??????????
;===============================
;
    movlw b'00000110'		; ???????? ????????? ???? ? ?????????!
    movwf SECONDS_BCD		; ???? ??????
    movwf MINUTES_BCD		; ???? ?????
    movwf HOURS_BCD			; ???? ?????

    clrf IND_STATUS

;===============================
; 			???????? ????
;===============================
;

		;call message

MAIN_LOOP:






		; SECONDS
    movf SECONDS_BCD, w

    movwf IND_TMP			; ??? ????? ??????? ???????? ??? ?????????? ???????? ? ?????? - ???????? ?? ????????????

    bsf IND_STATUS, RB4		;
    bcf IND_STATUS, RB5

    call TIME_INDICATION

    call DELAY_1dot5_MS		; ??????? ???????? ????? ???????????? ?????? ? ?????. ????? ???????? ?? ????? ?????????? ?????? ?????????????????

		; MINUTES
    movf MINUTES_BCD, W

    movwf IND_TMP			; ??? ????? ??????? ???????? ??? ?????????? ???????? ? ?????? - ???????? ?? ????????????

    bcf IND_STATUS, RB4		;
    bsf IND_STATUS, RB5

    call TIME_INDICATION

    call DELAY_1dot5_MS		; ??????? ???????? ????? ???????????? ?????? ? ?????. ????? ???????? ?? ????? ?????????? ?????? ?????????????????

		; HOURS
    movf HOURS_BCD, W

    movwf IND_TMP			; ??? ????? ??????? ???????? ??? ?????????? ???????? ? ?????? - ???????? ?? ????????????
    bcf IND_STATUS, RB4		;
    bcf IND_STATUS, RB5

    call TIME_INDICATION

    call DELAY_1dot5_MS		; ??????? ???????? ????? ???????????? ?????? ? ?????. ????? ???????? ?? ????? ?????????? ?????? ?????????????????

    goto MAIN_LOOP

;===============================
; ???????????? ?????? ?????? ? ???????? ????? ?????? ?????? ?????????
;===============================
TIME_INDICATION


    movlw b'00000110'		; ???????? ????????? ???? ? ??????? ?????????? ????????!
    subwf IND_TMP, F		; ?? ????? ???????? ??? ????????? ??????????? ???????? ?? ????????? ??1

    clrf PORTA_TMP
    bsf PORTA_TMP, RA6		; ?????? ???????? ? ???????????? ?????

dozensIndLoop

    movf PORTA, W			; ??????? ??????? ????????? ??????? PORTA
    andlw b'10110000'		; ??????? ????, ??????? ?????????? ????????? ???????????
    iorwf PORTA_TMP, F		; ???????? ???????????? ???? ?? PORTA ? ??? RA6

    btfss PORTA_TMP, RA6	; ???? ??? PORTA_TMP ???????, ?? ??? ?????? ???????? ?????, ? ??????? ??? ??????????
    swapf IND_TMP, F		; ?????? ?????????? ???????? ???????? ??? ?????????? ????????


    movf IND_TMP, W			; ??????? ???????? ??? ??1
    andlw b'00001111'

    iorwf PORTA_TMP, F		; ?????? ????? ???????? ??1 ? PORTA

    movf IND_STATUS, W		; ??????? ????? ????????? ???????? ??? ??????
    andlw b'00110000'

    btfss STATUS, Z			; ???? ???????? ? ???? 0 ?????? ??????? ???? ? ?????????? ?????????, ?? ??????? ?? 0 ? ????????
    goto modifyPORTB

    btfsc PORTA_TMP, RA6	; RA6 = 0 ?????? ?????? ???????? ??????? ?????, ????? ???. ????????
    goto modifyPORTB

    movwf IND_TMP 		; ????? ????????? ?????? ??? ?????? PORTB ????? ?????? Z

	; ??? ????????? ?? ????? 0 ? ???????? ?????
    movf PORTA_TMP, W
    andlw b'00001111'

    btfsc STATUS, Z		; Z = 1 ?????? ?? ??????? ??????? ?????
    goto END_TIME_INDICATION

    movf IND_TMP, W		; ?????? ???????? ??? ??????????? PORTB



modifyPORTB


    bcf PORTB, RB4			; ??? ????? ?????? ?? ??? ??????, ??? ????? ??? ????????
    bcf PORTB, RB5			; ??????? ????? ??? ??????? ??? ?????? ???? ? ??????? ???????????
    iorwf PORTB, F

    movf PORTA_TMP, W		; ???????????? ? ??????
    movwf PORTA				; ?????????? ?????? ????? ????????

    clrf PORTA_TMP			; ??????? RA6 ??? ?????? ???????? ? ??????? ?????? ???? ??? ??????? ????????????
		;bcf PORTA_TMP, RA6		; ?????? ???????? ????????, ??????? ??????



    btfss PORTA, RA6		; ???? ??? ?????????, ?????? ??????? ???????
    goto END_TIME_INDICATION

    call DELAY_1dot5_MS		; ??????? ???????? ?????? ?????? ????? ????????? ? ?????????
    goto dozensIndLoop

END_TIME_INDICATION
    return


; *******************************************************************
; *							????????????
; *******************************************************************



; ============================
; ????????
; ============================

;---
; ?????????????? 197 ??
;-----

DELAY_197_MS

    decfsz    Delay1,f       ; Waste time.
    goto      DELAY_197_MS    ; The Inner loop takes 3 instructions per loop * 256 loopss = 768 instructions
    decfsz    Delay2,f       ; The outer loop takes and additional 3 instructions per lap * 256 loops
    goto      DELAY_197_MS    ; (768+3) * 256 = 197376 instructions / 1M instructions per second = 0.197 sec.
                              ; call it two-tenths of a second.

    return



;---
; ?????????????? 1.5 ??
;-----

DELAY_1dot5_MS		;

    movlw 0x05
    movwf Delay2
dl_set
    movlw 0x3E			;1496 ??????????	;7D - ??? 1 ?? ; 3E - 0,5?? ;BB - 1,5??
    movwf Delay1

dl_loop
    decfsz    Delay1,f       ; Waste time.
    goto      dl_loop    ; The Inner loop takes 3 instructions per loop * 256 loopss = 768 instructions = 0,000768 sec.
    decfsz    Delay2,f       ; The outer loop takes and additional 3 instructions per lap * 256 loops
    goto      dl_set    ; (768+3) * 256 = 197376 instructions / 1M instructions per second = 0.197 sec.
                              ; call it two-tenths of a second.

    return

    END


